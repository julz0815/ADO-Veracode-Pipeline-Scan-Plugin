"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var witBase = require("./default");
var witContracts = require("vso-node-api/interfaces/WorkItemTrackingInterfaces");
function getCommand(args) {
    return new WorkItemQuery(args);
}
exports.getCommand = getCommand;
var WorkItemQuery = /** @class */ (function (_super) {
    __extends(WorkItemQuery, _super);
    function WorkItemQuery() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.description = "Get a list of Work Items given a query";
        _this.serverCommand = true;
        return _this;
    }
    WorkItemQuery.prototype.getHelpArgs = function () {
        return ["project", "query"];
    };
    WorkItemQuery.prototype.exec = function () {
        var _this = this;
        var witApi = this.webApi.getWorkItemTrackingApi();
        return this.commandArgs.project.val(true).then(function (projectName) {
            return _this.commandArgs.query.val().then(function (query) {
                var wiql = { query: query };
                return witApi.queryByWiql(wiql, { project: projectName }).then(function (result) {
                    var workItemIds = [];
                    // Flat Query
                    if (result.queryType == witContracts.QueryType.Flat) {
                        workItemIds = result.workItems.map(function (val) { return val.id; }).slice(0, Math.min(200, result.workItems.length));
                    }
                    // Link Query
                    else {
                        var sourceIds = result.workItemRelations
                            .filter(function (relation) { return relation.source && relation.source.id; })
                            .map(function (relation) { return relation.source.id; });
                        var targetIds = result.workItemRelations
                            .filter(function (relation) { return relation.target && relation.target.id; })
                            .map(function (relation) { return relation.target.id; });
                        var allIds = sourceIds.concat(targetIds);
                        workItemIds = allIds.slice(0, Math.min(200, allIds.length));
                    }
                    var fieldRefs = result.columns.map(function (val) { return val.referenceName; });
                    fieldRefs = fieldRefs.slice(0, Math.min(20, result.columns.length));
                    return workItemIds.length > 0 ? witApi.getWorkItems(workItemIds, fieldRefs) : [];
                });
            });
        });
    };
    WorkItemQuery.prototype.friendlyOutput = function (data) {
        return witBase.friendlyOutput(data);
    };
    return WorkItemQuery;
}(witBase.WorkItemBase));
exports.WorkItemQuery = WorkItemQuery;
//# sourceMappingURL=query.js.map
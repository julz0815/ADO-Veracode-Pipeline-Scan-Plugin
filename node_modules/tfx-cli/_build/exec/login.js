"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tfcommand_1 = require("../lib/tfcommand");
var diskcache_1 = require("../lib/diskcache");
var credstore_1 = require("../lib/credstore");
var colors = require("colors");
var os = require("os");
var trace = require("../lib/trace");
function getCommand(args) {
    // this just offers description for help and to offer sub commands
    return new Login(args);
}
exports.getCommand = getCommand;
/**
 * Facilitates a "log in" to a service by caching credentials.
 */
var Login = /** @class */ (function (_super) {
    __extends(Login, _super);
    function Login() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.description = "Login and cache credentials using a PAT or basic auth.";
        _this.serverCommand = true;
        return _this;
    }
    Login.prototype.exec = function () {
        var _this = this;
        trace.debug("Login.exec");
        var authHandler;
        return this.commandArgs.serviceUrl.val().then(function (collectionUrl) {
            return _this.getCredentials(collectionUrl, false)
                .then(function (handler) {
                authHandler = handler;
                return _this.getWebApi();
            })
                .then(function (webApi) {
                var agentApi = webApi.getTaskAgentApi();
                return agentApi
                    .connect()
                    .then(function (obj) {
                    var tfxCredStore = credstore_1.getCredentialStore("tfx");
                    var tfxCache = new diskcache_1.DiskCache("tfx");
                    var credString;
                    if (authHandler.username === "OAuth") {
                        credString = "pat:" + authHandler.password;
                    }
                    else {
                        credString = "basic:" + authHandler.username + ":" + authHandler.password;
                    }
                    return tfxCredStore.storeCredential(collectionUrl, "allusers", credString).then(function () {
                        return tfxCache
                            .setItem("cache", "connection", collectionUrl)
                            .then(function () { return ({ success: true }); });
                    });
                })
                    .catch(function (err) {
                    if (err && err.statusCode && err.statusCode === 401) {
                        trace.debug("Connection failed: invalid credentials.");
                        throw new Error("Invalid credentials.");
                    }
                    else if (err) {
                        trace.debug("Connection failed.");
                        throw new Error("Connection failed. Check your internet connection & collection URL." +
                            os.EOL +
                            "Message: " +
                            err.message);
                    }
                    else {
                        throw new Error("Unknown error logging in.");
                    }
                });
            });
        });
    };
    Login.prototype.friendlyOutput = function (data) {
        if (data.success) {
            trace.info(colors.green("Logged in successfully"));
        }
        else {
            trace.error("login unsuccessful.");
        }
    };
    return Login;
}(tfcommand_1.TfCommand));
exports.Login = Login;
//# sourceMappingURL=login.js.map